<!-- Course Header -->
<div class="course-header" style="background-image: linear-gradient(rgba(0,0,0,0.7), rgba(0,0,0,0.9)), url('<%= course.coverImage %>')">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-8">
                <div class="course-info">
                    <div class="course-meta">
                        <span class="course-category">
                            <i class="fas fa-graduation-cap"></i>
                            Curso
                        </span>
                        <span class="course-level">
                            <i class="fas fa-signal"></i>
                            <%= course.level || 'Iniciante' %>
                        </span>
                    </div>
                    <h1 class="course-title"><%= course.title %></h1>
                    <p class="course-description"><%= course.description %></p>
                    <div class="course-stats">
                        <div class="stat-item">
                            <i class="fas fa-book-open"></i>
                            <div class="stat-info">
                                <span class="stat-value"><%= course.modules.length %></span>
                                <span class="stat-label">Módulos</span>
                            </div>
                        </div>
                        <div class="stat-item">
                            <i class="fas fa-clock"></i>
                            <div class="stat-info">
                                <span class="stat-value"><%= course.modules.reduce((total, module) => 
                                    total + module.lessons.reduce((sum, lesson) => 
                                        sum + lesson.duration, 0), 0) %></span>
                                <span class="stat-label">Minutos</span>
                            </div>
                        </div>
                        <div class="stat-item">
                            <i class="fas fa-star"></i>
                            <div class="stat-info">
                                <span class="stat-value"><%= course.experiencePoints %></span>
                                <span class="stat-label">XP</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="progress-card">
                    <div class="progress-circle-wrapper">
                        <div class="progress-circle" data-progress="<%= progress %>">
                            <div class="progress-circle-inner">
                                <span class="progress-value"><%= progress %>%</span>
                                <span class="progress-label">Concluído</span>
                            </div>
                        </div>
                    </div>
                    <% if (progress === 100) { %>
                        <a href="/certificates/<%= course._id %>" class="btn btn-certificate">
                            <i class="fas fa-award"></i>
                            Baixar Certificado
                        </a>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Course Content -->
<div class="course-content">
    <div class="container">
        <div class="row">
            <!-- Módulos (9 colunas) -->
            <div class="col-lg-9">
                <div class="modules-grid">
                    <% course.modules.forEach((module, moduleIndex) => { %>
                        <% 
                            const moduleHistory = history.modules[moduleIndex];
                            const completedLessons = moduleHistory.lessons.filter(l => l.completed).length;
                            const totalLessons = module.lessons.length;
                            const moduleProgress = Math.round((completedLessons / totalLessons) * 100);
                        %>
                        <div class="module-card">
                            <div class="module-header" data-bs-toggle="collapse" 
                                 data-bs-target="#module<%= moduleIndex %>">
                                <div class="module-info">
                                    <div class="module-icon">
                                        <i class="fas fa-book"></i>
                                    </div>
                                    <div class="module-details">
                                        <h3 class="module-title"><%= module.title %></h3>
                                        <div class="module-stats">
                                            <span>
                                                <i class="fas fa-film"></i> 
                                                <%= totalLessons %> aulas
                                            </span>
                                            <span>
                                                <i class="fas fa-check-circle"></i>
                                                <%= completedLessons %>/<%= totalLessons %> concluídas
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="module-progress">
                                    <div class="progress">
                                        <div class="progress-bar gradient-bg" style="width: <%= moduleProgress %>%"></div>
                                    </div>
                                    <span class="progress-text"><%= moduleProgress %>%</span>
                                </div>
                            </div>

                            <div id="module<%= moduleIndex %>" class="collapse">
                                <div class="lessons-list">
                                    <% module.lessons.forEach((lesson, lessonIndex) => { %>
                                        <% const lessonHistory = moduleHistory.lessons[lessonIndex]; %>
                                        <div class="lesson-item <%= lessonHistory.completed ? 'completed' : '' %>"
                                             data-module="<%= moduleIndex %>"
                                             data-lesson="<%= lessonIndex %>"
                                             data-video="<%= lesson.videoUrl %>"
                                             data-video-type="<%= lesson.videoType %>"
                                             data-title="<%= lesson.title %>">
                                            
                                            <div class="lesson-info">
                                                <div class="lesson-status">
                                                    <i class="fas <%= lessonHistory.completed ? 'fa-check-circle' : 'fa-play-circle' %>"></i>
                                                </div>
                                                <div class="lesson-details">
                                                    <h4 class="lesson-title"><%= lesson.title %></h4>
                                                    <div class="lesson-meta">
                                                        <span>
                                                            <i class="far fa-clock"></i> 
                                                            <%= lesson.duration %> min
                                                        </span>
                                                        <% if (lessonHistory.lastWatched) { %>
                                                            <span>
                                                                <i class="far fa-calendar-alt"></i>
                                                                Último acesso: <%= new Date(lessonHistory.lastWatched).toLocaleDateString() %>
                                                            </span>
                                                        <% } %>
                                                    </div>
                                                </div>
                                            </div>

                                            <button class="btn btn-watch" id="complete-button-<%= moduleIndex %>-<%= lessonIndex %>">
                                                <i class="fas <%= lessonHistory.completed ? 'fa-redo' : 'fa-play' %>"></i>
                                                <%= lessonHistory.completed ? 'Rever aula' : 'Assistir aula' %>
                                            </button>
                                        </div>
                                    <% }); %>

                                    <!-- Slides do Módulo -->
                                    <% if (module.slides && module.slides.length > 0) { %>
                                        <div class="slides-section mt-4">
                                            <h5 class="mb-3">Material de Apoio</h5>
                                            <div class="row g-4">
                                                <% module.slides.sort((a, b) => a.order - b.order).forEach((slide, slideIndex) => { %>
                                                    <div class="col-md-4 col-lg-3">
                                                        <div class="slide-card">
                                                            <div class="slide-thumbnail">
                                                                <% if (slide.images && slide.images.length > 0) { %>
                                                                    <div id="slideCarousel<%= module._id %>_<%= slide._id %>" class="carousel slide" data-bs-ride="carousel">
                                                                        <div class="carousel-inner">
                                                                            <% slide.images.sort((a, b) => a.order - b.order).forEach((image, imageIndex) => { %>
                                                                                <div class="carousel-item <%= imageIndex === 0 ? 'active' : '' %>"
                                                                                     onclick="previewSlide('<%= image.url %>', '<%= image.description %>')">
                                                                                    <img src="<%= image.url %>" alt="<%= slide.title %> - Imagem <%= imageIndex + 1 %>">
                                                                                    <% if (image.description) { %>
                                                                                        <div class="image-description">
                                                                                            <p><%= image.description %></p>
                                                                                        </div>
                                                                                    <% } %>
                                                                                </div>
                                                                            <% }); %>
                                                                        </div>
                                                                        <% if (slide.images.length > 1) { %>
                                                                            <button class="carousel-control-prev" type="button" 
                                                                                    data-bs-target="#slideCarousel<%= module._id %>_<%= slide._id %>" data-bs-slide="prev">
                                                                                <span class="carousel-control-prev-icon"></span>
                                                                                <span class="visually-hidden">Anterior</span>
                                                                            </button>
                                                                            <button class="carousel-control-next" type="button" 
                                                                                    data-bs-target="#slideCarousel<%= module._id %>_<%= slide._id %>" data-bs-slide="next">
                                                                                <span class="carousel-control-next-icon"></span>
                                                                                <span class="visually-hidden">Próximo</span>
                                                                            </button>
                                                                            <div class="carousel-indicators">
                                                                                <% slide.images.forEach((_, i) => { %>
                                                                                    <button type="button" 
                                                                                            data-bs-target="#slideCarousel<%= module._id %>_<%= slide._id %>" 
                                                                                            data-bs-slide-to="<%= i %>" 
                                                                                            class="<%= i === 0 ? 'active' : '' %>">
                                                                                    </button>
                                                                                <% }); %>
                                                                            </div>
                                                                        <% } %>
                                                                    </div>
                                                                <% } else { %>
                                                                    <div class="no-images">
                                                                        <i class="fas fa-images"></i>
                                                                        <p>Sem imagens</p>
                                                                    </div>
                                                                <% } %>
                                                            </div>
                                                            <div class="slide-content">
                                                                <h3 class="slide-title"><%= slide.title %></h3>
                                                                <% if (slide.description) { %>
                                                                    <p class="slide-description"><%= slide.description %></p>
                                                                <% } %>
                                                                <div class="slide-info">
                                                                    <i class="fas fa-file-alt"></i>
                                                                    <span>Slide <%= slide.order %></span>
                                                                    <% if (slide.images && slide.images.length > 0) { %>
                                                                        <span class="ms-2">
                                                                            <i class="fas fa-images"></i>
                                                                            <%= slide.images.length %> imagens
                                                                        </span>
                                                                    <% } %>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                <% }); %>
                                            </div>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>
            
            <!-- Timeline (3 colunas) -->
            <div class="col-lg-3">
                <div class="course-timeline">
                    <h4 class="timeline-title">Sua Jornada</h4>
                    <div class="timeline-container">
                        <% course.modules.forEach((module, moduleIndex) => { %>
                            <% 
                                const moduleHistory = history.modules[moduleIndex];
                                const completedLessons = moduleHistory.lessons.filter(l => l.completed).length;
                                const totalLessons = module.lessons.length;
                                const moduleProgress = Math.round((completedLessons / totalLessons) * 100);
                                const status = moduleProgress === 100 ? 'completed' : moduleProgress > 0 ? 'in-progress' : 'pending';
                            %>
                            <div class="timeline-item <%= status %>" data-bs-toggle="tooltip" data-bs-placement="left" 
                                 title="<%= module.title %> - <%= moduleProgress %>% concluído">
                                <div class="timeline-marker">
                                    <% if (status === 'completed') { %>
                                        <i class="fas fa-check"></i>
                                    <% } else if (status === 'in-progress') { %>
                                        <i class="fas fa-clock"></i>
                                    <% } else { %>
                                        <i class="fas fa-circle"></i>
                                    <% } %>
                                </div>
                                <div class="timeline-content">
                                    <h6><%= module.title %></h6>
                                    <div class="progress">
                                        <div class="progress-bar gradient-bg" style="width: <%= moduleProgress %>%"></div>
                                    </div>
                                    <small><%= completedLessons %>/<%= totalLessons %> aulas</small>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Seção de Material de Apoio -->
<div class="support-materials">
    <div class="support-materials-header">
        <div class="header-content">
            <div class="header-icon">
                <i class="fas fa-book"></i>
            </div>
            <div class="header-text">
                <h4>Material de Apoio</h4>
                <p>Documentos e recursos complementares para seu aprendizado</p>
            </div>
        </div>
        <% if (user.isAdmin) { %>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addAttachmentModal">
                <i class="fas fa-plus me-2"></i>
                Adicionar Material
            </button>
        <% } %>
    </div>

    <div class="support-materials-content">
        <% if (course.attachments && course.attachments.length > 0) { %>
            <div class="materials-grid">
                <% course.attachments.forEach(attachment => { %>
                    <div class="material-card">
                        <div class="material-icon">
                            <% if (attachment.fileType.includes('pdf')) { %>
                                <i class="fas fa-file-pdf"></i>
                            <% } else if (attachment.fileType.includes('image')) { %>
                                <i class="fas fa-file-image"></i>
                            <% } else if (attachment.fileType.includes('video')) { %>
                                <i class="fas fa-file-video"></i>
                            <% } else if (attachment.fileType.includes('word')) { %>
                                <i class="fas fa-file-word"></i>
                            <% } else if (attachment.fileType.includes('excel')) { %>
                                <i class="fas fa-file-excel"></i>
                            <% } else if (attachment.fileType.includes('powerpoint')) { %>
                                <i class="fas fa-file-powerpoint"></i>
                            <% } else { %>
                                <i class="fas fa-file-alt"></i>
                            <% } %>
                        </div>
                        <div class="material-info">
                            <h5 class="material-title"><%= attachment.title %></h5>
                            <% if (attachment.description) { %>
                                <p class="material-description"><%= attachment.description %></p>
                            <% } %>
                            <div class="material-meta">
                                <span class="file-size">
                                    <i class="fas fa-hdd"></i>
                                    <%= (attachment.fileSize / 1024 / 1024).toFixed(2) %> MB
                                </span>
                                <span class="download-count">
                                    <i class="fas fa-download"></i>
                                    <%= attachment.downloadCount %> downloads
                                </span>
                            </div>
                        </div>
                        <div class="material-actions">
                            <a href="/courses/<%= course._id %>/attachments/<%= attachment._id %>/download" 
                               class="btn btn-primary btn-download">
                                <i class="fas fa-download"></i>
                                <span>Download</span>
                            </a>
                            <% if (user.isAdmin) { %>
                                <button class="btn btn-danger btn-delete" onclick="deleteAttachment('<%= attachment._id %>')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            <% } %>
                        </div>
                    </div>
                <% }); %>
            </div>
        <% } else { %>
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="fas fa-file-alt"></i>
                </div>
                <h5>Nenhum material disponível</h5>
                <p>Não há materiais de apoio disponíveis para este curso no momento.</p>
            </div>
        <% } %>
    </div>
</div>

<!-- Modal para Adicionar Anexo -->
<% if (user.isAdmin) { %>
<div class="modal fade" id="addAttachmentModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Adicionar Material de Apoio</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="attachmentForm" enctype="multipart/form-data">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Título</label>
                        <input type="text" class="form-control" name="title" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Descrição</label>
                        <textarea class="form-control" name="description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Arquivo</label>
                        <small class="form-text text-muted d-block mb-2">
                            Tipos de arquivo permitidos: PDF, DOC, DOCX, XLS, XLSX, PPT, PPTX, imagens, vídeos e áudios.
                            Tamanho máximo: 50MB
                        </small>
                        <input type="file" class="form-control" name="file" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Adicionar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Adicione este script no final da página -->
<script>
document.getElementById('attachmentForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    
    try {
        const response = await fetch(`/admin/courses/<%= course._id %>/attachments`, {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        
        if (data.success) {
            location.reload();
        } else {
            alert('Erro ao adicionar anexo: ' + data.message);
        }
    } catch (error) {
        console.error('Erro:', error);
        alert('Erro ao adicionar anexo');
    }
});

async function deleteAttachment(attachmentId) {
    if (!confirm('Tem certeza que deseja excluir este anexo?')) return;
    
    try {
        const response = await fetch(`/admin/courses/<%= course._id %>/attachments/${attachmentId}`, {
            method: 'DELETE'
        });
        
        const data = await response.json();
        
        if (data.success) {
            location.reload();
        } else {
            alert('Erro ao excluir anexo: ' + data.message);
        }
    } catch (error) {
        console.error('Erro:', error);
        alert('Erro ao excluir anexo');
    }
}
</script>
<% } %>

<!-- Video Modal -->
<div class="modal fade" id="videoModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="lessonTitle"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-0">
                <div id="videoContainer"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Fechar
                </button>
                <button type="button" class="btn btn-primary" id="completeLesson">
                    <i class="fas fa-check"></i> Marcar como Concluído
                </button>
            </div>
        </div>
    </div>
</div>

<style>
/* Course Header Styles */
.course-header {
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    color: white;
    padding: 5rem 0;
    margin-bottom: 2rem;
    position: relative;
}

.course-meta {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.course-category,
.course-level {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: rgba(255, 255, 255, 0.1);
    padding: 0.5rem 1rem;
    border-radius: 30px;
    font-size: 0.875rem;
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
}

.course-category:hover,
.course-level:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-2px);
}

.course-title {
    font-size: 2.75rem;
    font-weight: 700;
    margin-bottom: 1rem;
    line-height: 1.2;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
}

.course-description {
    font-size: 1.1rem;
    opacity: 0.9;
    margin-bottom: 2rem;
    line-height: 1.6;
    max-width: 800px;
}

.course-stats {
    display: flex;
    gap: 2rem;
}

.stat-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    background: rgba(255, 255, 255, 0.1);
    padding: 1rem 1.5rem;
    border-radius: 16px;
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
}

.stat-item:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-2px);
}

.stat-item i {
    font-size: 1.5rem;
    color: var(--primary);
}

.stat-info {
    display: flex;
    flex-direction: column;
}

.stat-value {
    font-size: 1.25rem;
    font-weight: 700;
    line-height: 1;
}

.stat-label {
    font-size: 0.875rem;
    opacity: 0.8;
    margin-top: 0.25rem;
}

/* Progress Card Styles */
.progress-card {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 24px;
    padding: 2.5rem;
    text-align: center;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
}

.progress-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
}

.progress-circle-wrapper {
    margin-bottom: 2rem;
}

.progress-circle {
    width: 180px;
    height: 180px;
    margin: 0 auto;
    position: relative;
    background: conic-gradient(var(--primary) var(--progress), rgba(255, 255, 255, 0.1) 0);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.progress-circle-inner {
    width: 160px;
    height: 160px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    border: 2px solid rgba(255, 255, 255, 0.1);
}

.progress-value {
    font-size: 3rem;
    font-weight: 700;
    line-height: 1;
    margin-bottom: 0.5rem;
    background: linear-gradient(45deg, #fff, rgba(255,255,255,0.8));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

.progress-label {
    font-size: 1rem;
    opacity: 0.9;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.btn-certificate {
    background: linear-gradient(45deg, var(--primary), var(--secondary));
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 12px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    justify-content: center;
    transition: all 0.3s ease;
    text-decoration: none;
    width: 100%;
}

.btn-certificate:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(var(--primary-rgb), 0.3);
    color: white;
}

.btn-certificate i {
    font-size: 1.25rem;
}

/* Responsive Design */
@media (max-width: 991px) {
    .course-header {
        padding: 3rem 0;
    }

    .course-title {
        font-size: 2.25rem;
    }

    .course-stats {
        flex-wrap: wrap;
        gap: 1rem;
    }

    .stat-item {
        flex: 1;
        min-width: calc(50% - 0.5rem);
    }

    .progress-card {
        margin-top: 2rem;
    }
}

@media (max-width: 768px) {
    .course-meta {
        flex-wrap: wrap;
    }

    .course-title {
        font-size: 2rem;
    }

    .stat-item {
        min-width: 100%;
    }

    .progress-circle {
        width: 160px;
        height: 160px;
    }

    .progress-circle-inner {
        width: 140px;
        height: 140px;
    }

    .progress-value {
        font-size: 2.5rem;
    }
}

/* Course Content */
.course-content {
    padding: 2rem 0;
}

.modules-grid {
    display: grid;
    gap: 1.5rem;
}

/* Module Card */
.module-card {
    background: var(--bg-card);
    border-radius: 16px;
    overflow: hidden;
    border: 1px solid var(--border-color);
    transition: all 0.3s ease;
}

.module-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
}

.module-header {
    padding: 1.5rem;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.module-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.module-icon {
    width: 48px;
    height: 48px;
    background: var(--primary);
    color: white;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
}

.module-details {
    flex: 1;
}

.module-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
}

.module-stats {
    display: flex;
    gap: 1rem;
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin-top: 0.25rem;
}

.module-progress {
    display: flex;
    align-items: center;
    gap: 1rem;
    min-width: 200px;
}

.progress {
    flex: 1;
    height: 8px;
    background: var(--hover-bg);
    border-radius: 4px;
    overflow: hidden;
}

.progress-bar {
    background: linear-gradient(90deg, var(--primary), var(--secondary));
    transition: width 0.3s ease;
}

.progress-text {
    font-size: 0.875rem;
    color: var(--text-secondary);
    min-width: 45px;
    text-align: right;
}

/* Lessons List */
.lessons-list {
    padding: 1.5rem;
    border-top: 1px solid var(--border-color);
}

.lesson-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-radius: 12px;
    margin-bottom: 0.75rem;
    background: var(--bg-main);
    border: 1px solid var(--border-color);
    transition: all 0.3s ease;
    cursor: pointer;
}

.lesson-item:hover {
    transform: translateX(4px);
    background: var(--hover-bg);
}

.lesson-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.lesson-status i {
    font-size: 1.5rem;
    color: var(--text-secondary);
}

.lesson-details {
    flex: 1;
}

.lesson-title {
    font-size: 1rem;
    font-weight: 500;
    margin: 0;
}

.lesson-meta {
    display: flex;
    gap: 1rem;
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin-top: 0.25rem;
}

.btn-watch {
    padding: 0.75rem 1.25rem;
    border-radius: 10px;
    background: var(--primary);
    color: white;
    border: none;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
}

.btn-watch:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.lesson-item.completed {
    border-color: var(--success);
}

.lesson-item.completed .lesson-status i {
    color: var(--success);
}

/* Video Modal */
.modal-content {
    background: var(--bg-card);
    border: none;
    border-radius: 16px;
    overflow: hidden;
}

#videoContainer {
    position: relative;
    background: #000;
    width: 100%;
}

.ratio {
    position: relative;
    width: 100%;
}

.ratio::before {
    content: "";
    display: block;
    padding-top: var(--bs-aspect-ratio);
}

.ratio-16x9 {
    --bs-aspect-ratio: 56.25%;
}

.ratio > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 0;
}

.embed-responsive-item {
    width: 100%;
    height: 100%;
    object-fit: contain;
}

/* Responsive Design */
@media (max-width: 768px) {
    .course-header {
        padding: 2rem 0;
    }

    .course-title {
        font-size: 2rem;
    }

    .course-stats {
        flex-direction: column;
    }

    .module-header {
        flex-direction: column;
        gap: 1rem;
    }

    .module-progress {
        width: 100%;
    }

    .lesson-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }

    .btn-watch {
        width: 100%;
        justify-content: center;
    }
}

.btn-certificate {
    background: linear-gradient(45deg, #FFD700, #FFA500);
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 12px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    transition: all 0.3s ease;
    text-decoration: none;
    margin-top: 1.5rem;
}

.btn-certificate:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    color: white;
}

.btn-certificate i {
    font-size: 1.25rem;
}

.attachment-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
    padding: 1rem;
}

.attachment-item {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    background: var(--bg-card);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 1rem;
    height: 100%;
    min-height: 160px;
    transition: all 0.3s ease;
}

.attachment-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.attachment-info {
    display: flex;
    gap: 1rem;
    flex: 1;
}

.attachment-icon {
    width: 40px;
    height: 40px;
    min-width: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(var(--primary-rgb), 0.1);
    border-radius: 8px;
    color: var(--primary);
    font-size: 1.2rem;
}

.attachment-details {
    flex: 1;
    min-width: 0;
}

.attachment-title {
    margin: 0;
    font-weight: 500;
    font-size: 1rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.attachment-description {
    margin: 0.25rem 0 0;
    font-size: 0.875rem;
    color: var(--text-secondary);
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.attachment-meta {
    display: flex;
    gap: 1rem;
    margin-top: 0.5rem;
    font-size: 0.75rem;
    color: var(--text-secondary);
}

.attachment-actions {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
    justify-content: flex-end;
}

/* Responsividade */
@media (max-width: 768px) {
    .attachment-list {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
}

@media (max-width: 480px) {
    .attachment-list {
        grid-template-columns: 1fr;
    }
    
    .attachment-actions {
        flex-direction: row;
        width: 100%;
    }
    
    .attachment-actions .btn {
        flex: 1;
    }
}

.gradient-bg {
    background: linear-gradient(90deg, var(--primary), var(--secondary));
}

/* Dark theme for complementary materials card */
.card.bg-dark {
    background-color: #212529 !important;
    border-color: #343a40 !important;
}

.card.bg-dark .card-header {
    background-color: #343a40 !important;
    border-color: #495057 !important;
}

.attachment-item.bg-dark-subtle {
    background-color: #2c3034 !important;
    border-color: #495057 !important;
}

.attachment-item.bg-dark-subtle .attachment-icon {
    background-color: rgba(255, 255, 255, 0.1) !important;
    color: #fff !important;
}

.attachment-item.bg-dark-subtle .attachment-title {
    color: #fff !important;
}

.attachment-item.bg-dark-subtle .attachment-description,
.attachment-item.bg-dark-subtle .attachment-meta {
    color: rgba(255, 255, 255, 0.7) !important;
}

.btn-outline-light {
    color: #f8f9fa !important;
    border-color: #f8f9fa !important;
}

.btn-outline-light:hover {
    background-color: #f8f9fa !important;
    color: #212529 !important;
}

/* Estilos para o carrossel de slides */
.slides-carousel {
    background: rgba(0, 0, 0, 0.05);
    border-radius: 12px;
    padding: 1.5rem;
    margin-top: 2rem;
}

.slides-title {
    font-size: 1.2rem;
    color: var(--text-primary);
    margin-bottom: 1rem;
}

.carousel {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.carousel-item {
    background: var(--bg-card);
}

.slide-content {
    position: relative;
    padding-top: 56.25%; /* 16:9 Aspect Ratio */
}

.slide-content img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: contain;
}

.carousel-caption {
    background: rgba(0, 0, 0, 0.7);
    border-radius: 8px;
    padding: 1rem;
    max-width: 80%;
    margin: 0 auto;
}

.carousel-indicators {
    margin-bottom: 0;
}

.carousel-control-prev,
.carousel-control-next {
    width: 10%;
    background: rgba(0, 0, 0, 0.3);
}

.carousel-control-prev:hover,
.carousel-control-next:hover {
    background: rgba(0, 0, 0, 0.5);
}

/* Dark theme adjustments */
[data-bs-theme="dark"] .slides-carousel {
    background: rgba(255, 255, 255, 0.05);
}

[data-bs-theme="dark"] .carousel-caption {
    background: rgba(0, 0, 0, 0.8);
}

/* Estilos para os Slides */
.slides-section {
    padding-top: 1.5rem;
    border-top: 1px solid var(--border-color);
}

.slide-card {
    background: var(--bg-card);
    border: 1px solid var(--border-color);
    border-radius: 16px;
    overflow: hidden;
    transition: all 0.3s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
}

.slide-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
}

.slide-thumbnail {
    position: relative;
    padding-top: 56.25%; /* 16:9 aspect ratio */
    background: #000;
    overflow: hidden;
}

.slide-thumbnail .carousel,
.slide-thumbnail .carousel-inner,
.slide-thumbnail .carousel-item {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.slide-thumbnail img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: contain;
    cursor: pointer;
}

.slide-thumbnail .carousel-control-prev,
.slide-thumbnail .carousel-control-next {
    width: 15%;
    background: rgba(0, 0, 0, 0.3);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.slide-thumbnail:hover .carousel-control-prev,
.slide-thumbnail:hover .carousel-control-next {
    opacity: 1;
}

.slide-thumbnail .carousel-indicators {
    margin-bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    border-radius: 12px;
    padding: 4px 8px;
}

.slide-thumbnail .carousel-indicators button {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    margin: 0 4px;
    background-color: rgba(255, 255, 255, 0.5);
}

.slide-thumbnail .carousel-indicators button.active {
    background-color: #fff;
}

.image-description {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 12px;
    font-size: 0.875rem;
    transform: translateY(100%);
    transition: transform 0.3s ease;
}

.carousel-item:hover .image-description {
    transform: translateY(0);
}

.no-images {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background: var(--bg-card);
    color: var(--text-secondary);
    gap: 8px;
}

.no-images i {
    font-size: 2rem;
}

.slide-content {
    padding: 1.25rem;
    flex: 1;
    display: flex;
    flex-direction: column;
}

.slide-title {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: var(--text-primary);
}

.slide-description {
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin-bottom: 1rem;
    flex: 1;
}

.slide-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 0.875rem;
    color: var(--text-secondary);
    padding-top: 0.75rem;
    border-top: 1px solid var(--border-color);
}

.slide-info i {
    color: var(--primary);
}

/* Estilos para o preview do slide */
.slide-preview-container {
    backdrop-filter: blur(10px);
}

.slide-preview-popup {
    border-radius: 16px;
    overflow: hidden;
}

.slide-preview-popup img {
    max-height: 85vh;
    object-fit: contain;
}

.slide-preview-title {
    font-size: 1rem;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    margin: 0;
}

/* Estilos para o carrossel em tela cheia */
.fullscreen-carousel {
    position: relative;
    width: 100%;
    height: 85vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #000;
    border-radius: 16px;
    overflow: hidden;
}

.fullscreen-carousel .main-image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
}

.fullscreen-carousel .image-description {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 1rem;
    margin: 0;
    font-size: 1rem;
    text-align: center;
}

.fullscreen-carousel .nav-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0.7;
}

.fullscreen-carousel .nav-btn:hover {
    background: rgba(0, 0, 0, 0.8);
    opacity: 1;
}

.fullscreen-carousel .nav-btn.prev {
    left: 20px;
}

.fullscreen-carousel .nav-btn.next {
    right: 20px;
}

.fullscreen-carousel .carousel-dots {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 8px;
    padding: 8px 16px;
    background: rgba(0, 0, 0, 0.5);
    border-radius: 20px;
}

.fullscreen-carousel .dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.5);
    border: none;
    padding: 0;
    cursor: pointer;
    transition: all 0.3s ease;
}

.fullscreen-carousel .dot.active {
    background: white;
    transform: scale(1.2);
}

.preview-close-button {
    position: absolute;
    top: 20px;
    right: 20px;
    background: rgba(0, 0, 0, 0.5) !important;
    color: white !important;
    border-radius: 50%;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

.preview-close-button:hover {
    background: rgba(0, 0, 0, 0.8) !important;
}

@media (max-width: 768px) {
    .fullscreen-carousel .nav-btn {
        width: 40px;
        height: 40px;
    }
    
    .fullscreen-carousel .nav-btn.prev {
        left: 10px;
    }
    
    .fullscreen-carousel .nav-btn.next {
        right: 10px;
    }
    
    .fullscreen-carousel .image-description {
        padding: 0.75rem;
        font-size: 0.875rem;
    }
}

/* Estilos para a Timeline */
.course-timeline {
    position: sticky;
    top: 20px;
    background: var(--bg-card);
    border-radius: 16px;
    padding: 1.5rem;
    border: 1px solid var(--border-color);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
}

.timeline-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    color: var(--text-primary);
    padding-bottom: 0.75rem;
    border-bottom: 2px solid var(--primary);
}

.timeline-container {
    position: relative;
    padding-left: 1.5rem;
}

.timeline-container::before {
    content: '';
    position: absolute;
    left: 7px;
    top: 0;
    bottom: 0;
    width: 2px;
    background: var(--border-color);
}

.timeline-item {
    position: relative;
    padding-bottom: 1.5rem;
    padding-left: 1rem;
}

.timeline-marker {
    position: absolute;
    left: -1.5rem;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    background: var(--bg-card);
    border: 2px solid var(--border-color);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1;
    transition: all 0.3s ease;
}

.timeline-marker i {
    font-size: 0.75rem;
    color: var(--text-secondary);
}

.timeline-content {
    background: var(--bg-main);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 1rem;
    transition: all 0.3s ease;
}

.timeline-content h6 {
    font-size: 0.875rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
}

.timeline-content .progress {
    height: 6px;
    margin-bottom: 0.5rem;
    background: var(--hover-bg);
}

.timeline-content small {
    font-size: 0.75rem;
    color: var(--text-secondary);
}

/* Estados da Timeline */
.timeline-item.completed .timeline-marker {
    background: var(--success);
    border-color: var(--success);
}

.timeline-item.completed .timeline-marker i {
    color: white;
}

.timeline-item.in-progress .timeline-marker {
    background: var(--primary);
    border-color: var(--primary);
}

.timeline-item.in-progress .timeline-marker i {
    color: white;
}

.timeline-item:hover .timeline-content {
    transform: translateX(4px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

/* Responsividade */
@media (max-width: 991px) {
    .course-timeline {
        margin-top: 2rem;
        position: relative;
        top: 0;
    }
}

/* Estilos para Material de Apoio */
.support-materials {
    background: var(--bg-card);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    margin-top: 2rem;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
}

.support-materials-header {
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: var(--bg-main);
}

.header-content {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.header-icon {
    width: 48px;
    height: 48px;
    background: var(--primary);
    color: white;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
}

.header-text h4 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
}

.header-text p {
    margin: 0.25rem 0 0;
    font-size: 0.875rem;
    color: var(--text-secondary);
}

.support-materials-content {
    padding: 1.5rem;
}

.materials-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
}

.material-card {
    background: var(--bg-main);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 1.25rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    transition: all 0.3s ease;
}

.material-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
}

.material-icon {
    width: 48px;
    height: 48px;
    background: rgba(var(--primary-rgb), 0.1);
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    color: var(--primary);
}

.material-info {
    flex: 1;
}

.material-title {
    font-size: 1rem;
    font-weight: 600;
    margin: 0 0 0.5rem;
    color: var(--text-primary);
}

.material-description {
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin: 0 0 0.75rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.material-meta {
    display: flex;
    gap: 1rem;
    font-size: 0.75rem;
    color: var(--text-secondary);
}

.material-meta span {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.material-actions {
    display: flex;
    gap: 0.5rem;
    margin-top: 0.5rem;
}

.btn-download {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem;
    border-radius: 8px;
    font-size: 0.875rem;
    transition: all 0.3s ease;
}

.btn-delete {
    width: 40px;
    height: 40px;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 8px;
}

.empty-state {
    text-align: center;
    padding: 3rem 1.5rem;
    color: var(--text-secondary);
}

.empty-icon {
    width: 64px;
    height: 64px;
    background: rgba(var(--primary-rgb), 0.1);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    color: var(--primary);
    margin: 0 auto 1rem;
}

.empty-state h5 {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
}

.empty-state p {
    font-size: 0.875rem;
    max-width: 400px;
    margin: 0 auto;
}

/* Responsividade */
@media (max-width: 768px) {
    .support-materials-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }

    .header-content {
        flex-direction: column;
        text-align: center;
    }

    .materials-grid {
        grid-template-columns: 1fr;
    }

    .material-card {
        text-align: center;
    }

    .material-icon {
        margin: 0 auto;
    }

    .material-meta {
        justify-content: center;
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM Content Loaded');
    const videoModal = document.getElementById('videoModal') ? new bootstrap.Modal(document.getElementById('videoModal')) : null;
    console.log('Video Modal initialized:', videoModal);
    const courseId = '<%= course._id %>';
    
    // Initialize progress circles
    document.querySelectorAll('.progress-circle').forEach(circle => {
        if (circle && circle.dataset.progress) {
            circle.style.setProperty('--progress', `${circle.dataset.progress}%`);
        }
    });

    // Handle lesson clicks
    const lessonItems = document.querySelectorAll('.lesson-item');
    console.log('Found lesson items:', lessonItems.length);
    
    lessonItems.forEach(item => {
        if (item) {
            item.addEventListener('click', async function(e) {
                e.preventDefault();
                console.log('Lesson clicked:', this);
                console.log('Event:', e);
                
                if (!videoModal) {
                    console.error('Video modal not found or not initialized');
                    return;
                }
                
                const moduleIndex = this.dataset.module;
                const lessonIndex = this.dataset.lesson;
                const videoUrl = this.dataset.video;
                const title = this.dataset.title;
                
                console.log('Lesson data:', {
                    moduleIndex,
                    lessonIndex,
                    videoUrl,
                    title,
                    dataset: this.dataset
                });
                
                const lessonTitle = document.getElementById('lessonTitle');
                if (lessonTitle) {
                    lessonTitle.textContent = title;
                    console.log('Updated lesson title:', title);
                } else {
                    console.error('Lesson title element not found');
                }

                let embedHtml = '';
                const videoType = this.dataset.videoType;
                console.log('Video type:', videoType, 'URL:', videoUrl);

                if (videoType === 'youtube' || videoUrl.includes('youtube.com') || videoUrl.includes('youtu.be')) {
                    // Extrair o ID do vídeo do YouTube da URL
                    let youtubeId = '';
                    
                    if (videoUrl.includes('youtu.be/')) {
                        youtubeId = videoUrl.split('youtu.be/')[1];
                    } else if (videoUrl.includes('youtube.com/watch?v=')) {
                        youtubeId = videoUrl.split('v=')[1];
                    }
                    
                    // Remover parâmetros adicionais se existirem
                    youtubeId = youtubeId ? youtubeId.split('&')[0] : '';

                    if (youtubeId) {
                        console.log('YouTube ID found:', youtubeId);
                        embedHtml = `
                            <div class="ratio ratio-16x9">
                                <iframe 
                                    src="https://www.youtube.com/embed/${youtubeId}"
                                    title="YouTube video player"
                                    frameborder="0"
                                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                                    allowfullscreen>
                                </iframe>
                            </div>
                        `;
                    } else {
                        console.error('YouTube ID not found in URL:', videoUrl);
                        embedHtml = '<div class="alert alert-danger">Erro ao carregar o vídeo. URL do YouTube inválida.</div>';
                    }
                } else if (videoType === 'vimeo') {
                    // Extrair o ID do vídeo do Vimeo da URL
                    const vimeoId = videoUrl.match(/(?:vimeo\.com\/)([0-9]+)/i)?.[1];
                    if (vimeoId) {
                        console.log('Vimeo ID found:', vimeoId);
                        embedHtml = `
                            <div class="ratio ratio-16x9">
                                <iframe 
                                    src="https://player.vimeo.com/video/${vimeoId}" 
                                    frameborder="0" 
                                    allow="autoplay; fullscreen" 
                                    allowfullscreen>
                                </iframe>
                            </div>
                        `;
                    }
                } else {
                    // Vídeo local
                    console.log('Local video URL:', videoUrl);
                    embedHtml = `
                        <div class="ratio ratio-16x9">
                            <video 
                                controls 
                                controlsList="nodownload" 
                                class="embed-responsive-item">
                                <source src="${videoUrl}" type="video/mp4">
                                Seu navegador não suporta o elemento de vídeo.
                            </video>
                        </div>
                    `;
                }

                const videoContainer = document.getElementById('videoContainer');
                if (videoContainer) {
                    console.log('Updating video container');
                    videoContainer.innerHTML = embedHtml;
                    
                    // Verificar se o iframe foi criado corretamente
                    const iframe = videoContainer.querySelector('iframe');
                    if (iframe) {
                        console.log('iframe created with src:', iframe.src);
                    } else {
                        const video = videoContainer.querySelector('video');
                        if (video) {
                            console.log('video element created with src:', video.querySelector('source').src);
                        } else {
                            console.error('Neither iframe nor video was created');
                        }
                    }
                } else {
                    console.error('Video container not found');
                }
                
                // Configure complete button
                const completeButton = document.getElementById('completeLesson');
                const isCompleted = this.classList.contains('completed');
                
                if (completeButton) {
                    completeButton.disabled = isCompleted;
                    completeButton.innerHTML = isCompleted ? 
                        '<i class="fas fa-check"></i> Aula Concluída' : 
                        '<i class="fas fa-check"></i> Marcar como Concluído';
                    
                    completeButton.onclick = async () => {
                        if (isCompleted) return;

                        try {
                            completeButton.disabled = true;
                            completeButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Atualizando...';
                            
                            const response = await fetch(`/courses/${courseId}/progress`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    moduleIndex: parseInt(moduleIndex),
                                    lessonIndex: parseInt(lessonIndex),
                                    completed: true
                                })
                            });

                            if (!response.ok) {
                                throw new Error('Erro na resposta do servidor');
                            }

                            const result = await response.json();
                            console.log('Progress update result:', result);
                            
                            if (result.success) {
                                // Atualizar UI
                                this.classList.add('completed');
                                const statusIcon = this.querySelector('.lesson-status i');
                                statusIcon.classList.replace('fa-play-circle', 'fa-check-circle');
                                
                                // Atualizar barra de progresso do módulo
                                const moduleProgress = document.querySelector(`#module${moduleIndex} .progress-bar`);
                                const moduleProgressText = document.querySelector(`#module${moduleIndex} .progress-text`);
                                if (moduleProgress && moduleProgressText) {
                                    moduleProgress.style.width = `${result.moduleProgress}%`;
                                    moduleProgressText.textContent = `${result.moduleProgress}%`;
                                }
                                
                                // Atualizar progresso geral
                                const overallProgress = document.querySelector('.progress-circle');
                                const progressValue = document.querySelector('.progress-value');
                                if (overallProgress && progressValue) {
                                    overallProgress.style.setProperty('--progress', `${result.progress}%`);
                                    progressValue.textContent = `${result.progress}%`;
                                }

                                completeButton.innerHTML = '<i class="fas fa-check"></i> Aula Concluída';
                                
                                if (result.completed) {
                                    setTimeout(() => {
                                        location.reload();
                                    }, 1500);
                                }
                            }
                        } catch (error) {
                            console.error('Error updating progress:', error);
                            alert('Erro ao atualizar progresso');
                            completeButton.disabled = false;
                            completeButton.innerHTML = '<i class="fas fa-check"></i> Marcar como Concluído';
                        }
                    };
                } else {
                    console.error('Complete button not found');
                }
                
                videoModal.show();
            });
        }
    });

    // Clean up video when modal is closed
    const modalElement = document.getElementById('videoModal');
    if (modalElement) {
        modalElement.addEventListener('hidden.bs.modal', function() {
            const videoContainer = document.getElementById('videoContainer');
            if (videoContainer) {
                videoContainer.innerHTML = '';
            }
        });
    }
});

async function completeButton(moduleIndex, lessonIndex) {
    try {
        const response = await fetch(`/courses/<%= course._id %>/progress`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                moduleIndex: moduleIndex,
                lessonIndex: lessonIndex,
                completed: true
            })
        });

        const data = await response.json();
        
        if (data.success) {
            // Atualizar interface local
            document.querySelector(`#lesson-${moduleIndex}-${lessonIndex} .status-icon`)
                .classList.add('completed');
            
            // Atualizar progresso do módulo
            const moduleProgress = document.querySelector(`#module-${moduleIndex} .progress-bar`);
            if (moduleProgress) {
                moduleProgress.style.width = `${data.moduleProgress}%`;
            }

            // Atualizar progresso geral do curso
            const courseProgress = document.querySelector('.course-progress .progress-bar');
            if (courseProgress) {
                courseProgress.style.width = `${data.progress}%`;
            }

            // Se a página de perfil estiver carregada, atualizar suas estatísticas
            if (window.updateProfileStats) {
                window.updateProfileStats(data);
            }

            // Atualizar botão para "Concluído"
            const button = document.querySelector(`#complete-button-${moduleIndex}-${lessonIndex}`);
            if (button) {
                button.innerHTML = '<i class="fas fa-check"></i> Concluído';
                button.disabled = true;
            }
        } else {
            throw new Error(data.error || 'Erro ao atualizar progresso');
        }
    } catch (error) {
        console.error('Erro:', error);
        alert('Erro ao atualizar progresso');
    }
}

// Função para visualizar slide em tela cheia
function previewSlide(imageUrl, description) {
    // Encontrar o slide atual e todas as suas imagens
    const currentSlide = document.querySelector(`[src="${imageUrl}"]`).closest('.slide-card');
    const allImages = Array.from(currentSlide.querySelectorAll('.carousel-item')).map(item => ({
        url: item.querySelector('img').src,
        description: item.querySelector('.image-description p')?.textContent || ''
    }));
    
    // Encontrar o índice da imagem atual
    const currentIndex = allImages.findIndex(img => img.url === imageUrl);
    
    Swal.fire({
        html: `
            <div class="fullscreen-carousel">
                <img src="${imageUrl}" alt="Slide" class="main-image">
                ${description ? `<p class="image-description">${description}</p>` : ''}
                ${allImages.length > 1 ? `
                    <button class="nav-btn prev" onclick="changeFullscreenImage(-1)">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <button class="nav-btn next" onclick="changeFullscreenImage(1)">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                    <div class="carousel-dots">
                        ${allImages.map((_, i) => `
                            <button class="dot ${i === currentIndex ? 'active' : ''}" 
                                    onclick="goToFullscreenImage(${i})"></button>
                        `).join('')}
                    </div>
                ` : ''}
            </div>
        `,
        showConfirmButton: false,
        showCloseButton: true,
        width: '90%',
        padding: 0,
        background: 'var(--bg-card)',
        color: 'var(--text-primary)',
        customClass: {
            container: 'slide-preview-container',
            popup: 'slide-preview-popup',
            closeButton: 'preview-close-button'
        },
        didOpen: () => {
            // Armazenar dados do carrossel globalmente
            window.fullscreenCarousel = {
                images: allImages,
                currentIndex: currentIndex
            };
        }
    });
}

// Função para mudar a imagem em tela cheia
function changeFullscreenImage(direction) {
    const { images, currentIndex } = window.fullscreenCarousel;
    let newIndex = currentIndex + direction;
    
    // Circular através das imagens
    if (newIndex < 0) newIndex = images.length - 1;
    if (newIndex >= images.length) newIndex = 0;
    
    // Atualizar imagem e descrição
    const container = document.querySelector('.fullscreen-carousel');
    container.querySelector('.main-image').src = images[newIndex].url;
    
    const descriptionElement = container.querySelector('.image-description');
    if (descriptionElement) {
        if (images[newIndex].description) {
            descriptionElement.textContent = images[newIndex].description;
            descriptionElement.style.display = 'block';
        } else {
            descriptionElement.style.display = 'none';
        }
    } else if (images[newIndex].description) {
        container.insertAdjacentHTML('beforeend', 
            `<p class="image-description">${images[newIndex].description}</p>`);
    }
    
    // Atualizar dots
    container.querySelectorAll('.dot').forEach((dot, i) => {
        dot.classList.toggle('active', i === newIndex);
    });
    
    // Atualizar índice atual
    window.fullscreenCarousel.currentIndex = newIndex;
}

// Função para ir para uma imagem específica
function goToFullscreenImage(index) {
    const { images, currentIndex } = window.fullscreenCarousel;
    const direction = index - currentIndex;
    changeFullscreenImage(direction);
}

// Prevenir propagação de cliques nos controles do carrossel
document.addEventListener('DOMContentLoaded', function() {
    const carouselControls = document.querySelectorAll('.carousel-control-prev, .carousel-control-next, .carousel-indicators button');
    carouselControls.forEach(control => {
        control.addEventListener('click', function(e) {
            e.stopPropagation();
        });
    });
});

// Inicializar tooltips do Bootstrap
document.addEventListener('DOMContentLoaded', function() {
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
});
</script>