<!-- Container principal -->
<div class="container-fluid py-4">
    <!-- Área de mensagens -->
    <div id="messageArea"></div>

    <!-- Cabeçalho -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">Área de Mentoria</h1>
        <% if (user?.isMentor) { %>
            <a href="/mentoring/mentor-area" class="btn btn-primary">
                <i class="fas fa-chalkboard-teacher"></i> 
                Acessar Área do Mentor
            </a>
        <% } %>
    </div>

    <!-- Cards de Estatísticas -->
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body text-center">
                    <div class="display-4 text-primary mb-2">
                        <i class="fas fa-calendar-check"></i>
                    </div>
                    <h3><%= totalSessions || 0 %></h3>
                    <p class="text-secondary mb-0">Total de Sessões</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body text-center">
                    <div class="display-4 text-success mb-2">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <h3><%= completedSessions || 0 %></h3>
                    <p class="text-secondary mb-0">Sessões Concluídas</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body text-center">
                    <div class="display-4 text-warning mb-2">
                        <i class="fas fa-star"></i>
                    </div>
                    <h3><%= averageRating ? averageRating.toFixed(1) : '0.0' %></h3>
                    <p class="text-secondary mb-0">Avaliação Média</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Conteúdo Principal -->
    <div class="card">
        <div class="card-body">
            <!-- Tabs de Navegação -->
            <ul class="nav nav-tabs mb-4" id="mentoringTabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="mentors-tab" data-bs-toggle="tab" href="#mentors" role="tab">
                        <i class="fas fa-users"></i> Mentores Disponíveis
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="sessions-tab" data-bs-toggle="tab" href="#sessions" role="tab">
                        <i class="fas fa-calendar-check"></i> Minhas Sessões
                        <% if (upcomingSessions && upcomingSessions.length > 0) { %>
                            <span class="badge bg-primary rounded-pill"><%= upcomingSessions.length %></span>
                        <% } %>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="history-tab" data-bs-toggle="tab" href="#history" role="tab">
                        <i class="fas fa-history"></i> Histórico
                    </a>
                </li>
            </ul>

            <!-- Conteúdo das Tabs -->
            <div class="tab-content" id="mentoringTabsContent">
                <!-- Tab Mentores -->
                <div class="tab-pane fade show active" id="mentors" role="tabpanel">
                    <!-- Filtros -->
                    <div class="row mb-4">
                        <div class="col-md-4">
                            <input type="text" class="form-control" id="searchMentor" 
                                   placeholder="Buscar por nome ou especialidade...">
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="specialtyFilter">
                                <option value="">Todas as especialidades</option>
                                <% specialties.forEach(specialty => { %>
                                    <option value="<%= specialty %>"><%= specialty %></option>
                                <% }) %>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="ratingFilter">
                                <option value="">Todas as avaliações</option>
                                <option value="4">4+ estrelas</option>
                                <option value="3">3+ estrelas</option>
                                <option value="2">2+ estrelas</option>
                            </select>
                        </div>
                    </div>

                    <!-- Lista de Mentores -->
                    <div class="row" id="mentorsList">
                        <% if (mentors && mentors.length > 0) { %>
                            <% mentors.forEach(mentor => { %>
                                <div class="col-md-6 col-lg-4 mb-4 mentor-card">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <!-- Foto e Info Básica -->
                                            <div class="d-flex align-items-center mb-3">
                                                <% if (mentor.user?.profilePicture) { %>
                                                    <img src="<%= mentor.user.profilePicture %>" 
                                                         class="profile-img me-3"
                                                         alt="<%= mentor.user.name %>">
                                                <% } else { %>
                                                    <div class="profile-placeholder me-3">
                                                        <%= mentor.user?.name?.charAt(0).toUpperCase() || '?' %>
                                                    </div>
                                                <% } %>
                                                <div>
                                                    <h5 class="card-title mb-1">
                                                        <%= mentor.user?.name || 'Nome não disponível' %>
                                                    </h5>
                                                    <div class="rating">
                                                        <%= '★'.repeat(Math.floor(mentor.rating || 0)) %>
                                                        <%= '☆'.repeat(5 - Math.floor(mentor.rating || 0)) %>
                                                        <small class="text-secondary">
                                                            (<%= mentor.reviewsCount || 0 %>)
                                                        </small>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Biografia -->
                                            <p class="card-text text-secondary mb-3">
                                                <%= mentor.biography || 'Biografia não disponível' %>
                                            </p>

                                            <!-- Especialidades -->
                                            <div class="mb-3">
                                                <% (mentor.specialties || []).forEach(specialty => { %>
                                                    <span class="badge"><%= specialty %></span>
                                                <% }) %>
                                            </div>

                                            <!-- Disponibilidade -->
                                            <div class="mb-3">
                                                <small class="text-secondary">
                                                    <i class="fas fa-clock"></i> 
                                                    Próxima disponibilidade: 
                                                    <%= mentor.nextAvailability || 'Não disponível' %>
                                                </small>
                                            </div>

                                            <!-- Botões -->
                                            <div class="d-flex gap-2">
                                                <button class="btn btn-primary flex-grow-1" 
                                                        onclick="agendarMentoria('<%= mentor._id %>')">
                                                    <i class="fas fa-calendar-plus"></i> Agendar
                                                </button>
                                                <button class="btn btn-outline-primary" 
                                                        onclick="verPerfilMentor('<%= mentor._id %>')">
                                                    <i class="fas fa-user"></i> Perfil
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            <% }) %>
                        <% } else { %>
                            <div class="col-12">
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle"></i>
                                    Nenhum mentor disponível no momento.
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>

                <!-- Tab Sessões -->
                <div class="tab-pane fade" id="sessions" role="tabpanel">
                    <div class="row">
                        <% if (upcomingSessions && upcomingSessions.length > 0) { %>
                            <% upcomingSessions.forEach(session => { %>
                                <div class="col-md-6 mb-4">
                                    <div class="card session-card">
                                        <div class="session-header">
                                            <h5 class="mb-0">
                                                Sessão com <%= session.mentor?.user?.name || 'Mentor não disponível' %>
                                            </h5>
                                            <span class="badge bg-primary">Agendada</span>
                                        </div>
                                        <div class="session-body">
                                            <div class="session-info">
                                                <div class="session-date">
                                                    <div class="day">
                                                        <%= new Date(session.dateTime).getDate() %>
                                                    </div>
                                                    <div class="month">
                                                        <%= new Date(session.dateTime).toLocaleString('pt-BR', { month: 'short' }) %>
                                                    </div>
                                                </div>
                                                <div>
                                                    <p class="mb-1">
                                                        <i class="fas fa-clock"></i>
                                                        <%= new Date(session.dateTime).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }) %>
                                                    </p>
                                                    <p class="mb-1">
                                                        <i class="fas fa-hourglass-half"></i>
                                                        <%= session.duration %> minutos
                                                    </p>
                                                    <p class="mb-0">
                                                        <i class="fas fa-comment-alt"></i>
                                                        <%= session.topics || 'Sem tópicos definidos' %>
                                                    </p>
                                                </div>
                                            </div>

                                            <% if (session.meetingLink) { %>
                                                <div class="alert alert-info mb-3">
                                                    <h6 class="mb-2">
                                                        <i class="fas fa-video"></i> Link da Reunião:
                                                    </h6>
                                                    <div class="d-flex align-items-center gap-2">
                                                        <input type="text" 
                                                               class="form-control" 
                                                               value="<%= session.meetingLink %>" 
                                                               readonly>
                                                        <button class="btn btn-outline-primary" 
                                                                onclick="copyMeetLink('<%= session.meetingLink %>')"
                                                                title="Copiar link">
                                                            <i class="fas fa-copy"></i>
                                                        </button>
                                                    </div>
                                                    <div class="mt-2">
                                                        <a href="<%= session.meetingLink %>" 
                                                           class="btn btn-success" 
                                                           target="_blank">
                                                            <i class="fas fa-video"></i> Entrar na Reunião
                                                        </a>
                                                    </div>
                                                </div>
                                            <% } else { %>
                                                <div class="alert alert-warning mb-3">
                                                    <i class="fas fa-info-circle"></i>
                                                    O link da reunião será disponibilizado próximo ao horário agendado.
                                                </div>
                                            <% } %>

                                            <div class="d-flex justify-content-end">
                                                <button class="btn btn-danger" 
                                                        onclick="cancelarSessao('<%= session._id %>')">
                                                    <i class="fas fa-times"></i> Cancelar
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            <% }) %>
                        <% } else { %>
                            <div class="col-12">
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle"></i>
                                    Você não tem sessões agendadas no momento.
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>

                <!-- Tab Histórico -->
                <div class="tab-pane fade" id="history" role="tabpanel">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Data</th>
                                    <th>Mentor</th>
                                    <th>Duração</th>
                                    <th>Status</th>
                                    <th>Avaliação</th>
                                    <th>Ações</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if (pastSessions && pastSessions.length > 0) { %>
                                    <% pastSessions.forEach(session => { %>
                                        <tr>
                                            <td>
                                                <%= new Date(session.dateTime).toLocaleDateString('pt-BR') %>
                                            </td>
                                            <td>
                                                <%= session.mentor?.user?.name || 'Mentor não disponível' %>
                                            </td>
                                            <td><%= session.duration %> min</td>
                                            <td>
                                                <span class="badge bg-<%= session.status === 'completed' ? 'success' : 'danger' %>">
                                                    <%= session.status === 'completed' ? 'Concluída' : 'Cancelada' %>
                                                </span>
                                            </td>
                                            <td>
                                                <% if (session.rating) { %>
                                                    <div class="rating">
                                                        <%= '★'.repeat(session.rating) %>
                                                        <%= '☆'.repeat(5 - session.rating) %>
                                                    </div>
                                                <% } else if (session.status === 'completed') { %>
                                                    <button class="btn btn-primary btn-sm"
                                                            onclick="avaliarSessao('<%= session._id %>')">
                                                        <i class="fas fa-star"></i> Avaliar
                                                    </button>
                                                <% } %>
                                            </td>
                                            <td>
                                                <button class="btn btn-info btn-sm"
                                                        onclick="verDetalhes('<%= session._id %>')">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    <% }) %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="6" class="text-center">
                                            Nenhuma sessão no histórico.
                                        </td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Agendamento -->
<div class="modal fade" id="agendamentoModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Agendar Mentoria</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="agendamentoForm">
                    <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                    <input type="hidden" id="mentorId" name="mentorId">
                    
                    <div class="mb-3">
                        <label for="sessionDate" class="form-label">Data</label>
                        <input type="date" class="form-control" id="sessionDate" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="sessionTime" class="form-label">Horário</label>
                        <select class="form-select" id="sessionTime" required>
                            <option value="">Selecione uma data primeiro</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label for="sessionDuration" class="form-label">Duração (minutos)</label>
                        <select class="form-select" id="sessionDuration" required>
                            <option value="30">30 minutos</option>
                            <option value="60">1 hora</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label for="sessionTopics" class="form-label">Tópicos a serem discutidos</label>
                        <textarea class="form-control" id="sessionTopics" rows="3" required></textarea>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Método de Pagamento</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="paymentCoins" value="coins" checked>
                            <label class="form-check-label" for="paymentCoins">
                                Pagar com Moedas Virtuais
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="confirmarAgendamento()">Agendar</button>
            </div>
        </div>
    </div>
</div>

<!-- Estilos e Scripts -->
<style>
:root {
    --bg-main: #0f172a;
    --bg-card: #1e293b;
    --bg-hover: #2d3748;
    --text-primary: #f1f5f9;
    --text-secondary: #94a3b8;
    --primary: #6366f1;
    --primary-dark: #4f46e5;
    --secondary: #818cf8;
    --border-color: #334155;
    --success: #10b981;
    --warning: #f59e0b;
    --info: #3b82f6;
    --danger: #ef4444;
}

body {
    background: var(--bg-main);
    color: var(--text-primary);
}

.container-fluid {
    padding: 2rem;
}

/* Cards e Estatísticas */
.card {
    background: var(--bg-card);
    border: 1px solid var(--border-color);
    border-radius: 1rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
}

.card:hover {
    transform: translateY(-5px);
}

.card-title {
    color: var(--text-primary);
    font-weight: 600;
}

.display-4 {
    font-size: 2.5rem;
}

/* Tabs de Navegação */
.nav-tabs {
    border-bottom: 1px solid var(--border-color);
}

.nav-tabs .nav-link {
    color: var(--text-secondary);
    border: none;
    border-bottom: 2px solid transparent;
    padding: 0.75rem 1rem;
    margin-right: 1rem;
    background: transparent;
}

.nav-tabs .nav-link:hover {
    color: var(--text-primary);
    border-color: var(--primary);
    background: var(--bg-hover);
}

.nav-tabs .nav-link.active {
    color: var(--primary);
    background: transparent;
    border-bottom: 2px solid var(--primary);
}

/* Mentor Cards */
.mentor-card .card {
    height: 100%;
    background: var(--bg-card);
    border: 1px solid var(--border-color);
}

.mentor-card .profile-img {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 50%;
    border: 2px solid var(--primary);
}

.mentor-card .profile-placeholder {
    width: 60px;
    height: 60px;
    background: var(--primary);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    font-weight: 600;
}

.mentor-card .rating {
    color: var(--warning);
}

.mentor-card .badge {
    background: var(--primary);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 0.75rem;
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
}

/* Sessões */
.session-card {
    margin-bottom: 1rem;
}

.session-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
}

.session-body {
    padding: 1.5rem;
}

.session-info {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
}

.session-date {
    background: var(--bg-hover);
    padding: 0.75rem;
    border-radius: 0.75rem;
    text-align: center;
    min-width: 100px;
}

.session-date .day {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary);
}

.session-date .month {
    color: var(--text-secondary);
    font-size: 0.875rem;
}

/* Table Styles */
.table {
    color: var(--text-primary);
}

.table thead th {
    background: var(--bg-hover);
    border-bottom: 2px solid var(--border-color);
    color: var(--text-secondary);
    padding: 1rem;
    font-weight: 600;
}

.table tbody td {
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
    vertical-align: middle;
}

.table tbody tr:hover {
    background: var(--bg-hover);
}

/* Form Controls */
.form-control, .form-select {
    background: var(--bg-hover);
    border: 1px solid var(--border-color);
    color: var(--text-primary);
    border-radius: 0.75rem;
}

.form-control:focus, .form-select:focus {
    background: var(--bg-hover);
    border-color: var(--primary);
    color: var(--text-primary);
    box-shadow: 0 0 0 0.25rem rgba(99, 102, 241, 0.25);
}

.form-control::placeholder {
    color: var(--text-secondary);
}

/* Buttons */
.btn {
    border-radius: 0.75rem;
    padding: 0.5rem 1rem;
    transition: all 0.3s ease;
}

.btn-primary {
    background: var(--primary);
    border-color: var(--primary);
}

.btn-primary:hover {
    background: var(--primary-dark);
    border-color: var(--primary-dark);
}

.btn-success {
    background: var(--success);
    border-color: var(--success);
}

.btn-danger {
    background: var(--danger);
    border-color: var(--danger);
}

/* Alerts */
.alert {
    border-radius: 1rem;
    border: none;
    padding: 1rem;
}

.alert-info {
    background: rgba(59, 130, 246, 0.2);
    color: #3b82f6;
}

.alert-warning {
    background: rgba(245, 158, 11, 0.2);
    color: #f59e0b;
}

.alert-danger {
    background: rgba(239, 68, 68, 0.2);
    color: #ef4444;
}

/* Modal */
.modal-content {
    background: var(--bg-card);
    border: 1px solid var(--border-color);
}

.modal-header {
    border-bottom: 1px solid var(--border-color);
}

.modal-footer {
    border-top: 1px solid var(--border-color);
}

/* Responsividade */
@media (max-width: 768px) {
    .container-fluid {
        padding: 1rem;
    }
    
    .nav-tabs {
        flex-wrap: nowrap;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }
    
    .nav-tabs .nav-link {
        white-space: nowrap;
    }
    
    .session-info {
        flex-direction: column;
    }
    
    .session-date {
        width: 100%;
    }
}
</style>

<!-- Scripts -->
<script>
// Filtros
document.getElementById('searchMentor').addEventListener('input', filterMentors);
document.getElementById('specialtyFilter').addEventListener('change', filterMentors);
document.getElementById('ratingFilter').addEventListener('change', filterMentors);

function filterMentors() {
    const search = document.getElementById('searchMentor').value.toLowerCase();
    const specialty = document.getElementById('specialtyFilter').value;
    const rating = document.getElementById('ratingFilter').value;

    document.querySelectorAll('.mentor-card').forEach(card => {
        const mentorName = card.querySelector('.card-title').textContent.toLowerCase();
        const mentorSpecialties = card.dataset.specialties.toLowerCase();
        const mentorRating = parseFloat(card.dataset.rating);

        const matchesSearch = mentorName.includes(search) || mentorSpecialties.includes(search);
        const matchesSpecialty = !specialty || mentorSpecialties.includes(specialty.toLowerCase());
        const matchesRating = !rating || mentorRating >= parseFloat(rating);

        card.style.display = matchesSearch && matchesSpecialty && matchesRating ? 'block' : 'none';
    });
}

// Agendamento
async function agendarMentoria(mentorId) {
    abrirModalAgendamento(mentorId);
}

// Função para carregar horários disponíveis
async function loadAvailableSlots(mentorId, date) {
    try {
        if (!mentorId || !date) {
            throw new Error('Mentor ID e data são obrigatórios');
        }

        const response = await fetch(`/mentoring/mentors/${mentorId}/availability?date=${date}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        updateTimeSelect(data.slots);
    } catch (error) {
        handleError(error, 'carregar horários disponíveis');
    }
}

// Formatar horário para exibição
function formatTime(time) {
    return time.replace(/^(\d{2}):(\d{2})$/, '$1h$2');
}

// Função para abrir o modal de agendamento
function abrirModalAgendamento(mentorId) {
    // Resetar o formulário
    document.getElementById('agendamentoForm').reset();
    document.getElementById('mentorId').value = mentorId;
    
    // Resetar o select de horários
    const timeSelect = document.getElementById('sessionTime');
    timeSelect.innerHTML = '<option value="">Selecione uma data primeiro</option>';
    timeSelect.disabled = true;
    
    // Abrir o modal
    const modal = new bootstrap.Modal(document.getElementById('agendamentoModal'));
    modal.show();
}

// Atualizar a função confirmarAgendamento para mostrar o modal de pagamento
async function confirmarAgendamento() {
    try {
        console.log('Iniciando processo de agendamento...');
        
        const form = document.getElementById('agendamentoForm');
        const csrfToken = form.querySelector('input[name="_csrf"]')?.value;
        
        if (!csrfToken) {
            throw new Error('Token de segurança não encontrado');
        }

        const mentorId = document.getElementById('mentorId').value;
        const date = document.getElementById('sessionDate').value;
        const time = document.getElementById('sessionTime').value;
        const duration = document.getElementById('sessionDuration').value;
        const topics = document.getElementById('sessionTopics').value;

        console.log('Dados do formulário:', { mentorId, date, time, duration, topics });

        if (!mentorId || !date || !time || !duration || !topics) {
            console.error('Validação de campos:', {
                mentorId: { valor: mentorId, valido: !!mentorId },
                date: { valor: date, valido: !!date },
                time: { valor: time, valido: !!time },
                duration: { valor: duration, valido: !!duration },
                topics: { valor: topics, valido: !!topics }
            });
            throw new Error('Todos os campos são obrigatórios');
        }

        console.log('Enviando requisição para criar sessão...');
        console.log('URL:', '/mentoring/sessions');
        console.log('Método:', 'POST');
        console.log('Headers:', {
            'Content-Type': 'application/json',
            'CSRF-Token': csrfToken
        });
        console.log('Body:', JSON.stringify({
            mentorId,
            date,
            time,
            duration,
            topics
        }, null, 2));

        const response = await fetch('/mentoring/sessions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'CSRF-Token': csrfToken
            },
            body: JSON.stringify({
                mentorId,
                date,
                time,
                duration,
                topics
            })
        });

        console.log('Status da resposta:', response.status);
        console.log('Headers da resposta:', Object.fromEntries(response.headers.entries()));

        const data = await response.json();
        console.log('Dados da resposta:', data);

        if (data.success) {
            console.log('Sessão agendada com sucesso:', data);
            showMessage('success', 'Sessão agendada com sucesso!');
            setTimeout(() => {
                window.location.reload();
            }, 2000);
        } else {
            console.error('Erro retornado pelo servidor:', data);
            throw new Error(data.error || 'Erro ao agendar sessão');
        }
    } catch (error) {
        console.error('=== ERRO NO AGENDAMENTO ===');
        console.error('Tipo do erro:', error.constructor.name);
        console.error('Mensagem:', error.message);
        console.error('Stack:', error.stack);
        showMessage('error', error.message || 'Erro ao agendar sessão');
    }
}

// Avaliação
function avaliarSessao(sessionId) {
    // Limpar formulário anterior
    document.getElementById('avaliacaoForm').reset();
    document.getElementById('sessionId').value = sessionId;
    
    // Abrir modal
    const modal = new bootstrap.Modal(document.getElementById('avaliacaoModal'));
    modal.show();
}

// Cancelamento
async function cancelarSessao(sessionId) {
    if (!confirm('Tem certeza que deseja cancelar esta sessão?')) return;

    try {
        const response = await fetch(`/mentoring/sessions/${sessionId}/cancel`, {
            method: 'POST'
        });

        const data = await response.json();

        if (data.success) {
            showMessage('success', 'Sessão cancelada com sucesso!');
            location.reload();
        } else {
            showMessage('danger', data.error || 'Erro ao cancelar sessão');
        }
    } catch (error) {
        console.error('Erro:', error);
        showMessage('danger', 'Erro ao processar sua solicitação');
    }
}

// Configurar eventos quando o documento carregar
document.addEventListener('DOMContentLoaded', function() {
    const dateInput = document.getElementById('sessionDate');
    const timeSelect = document.getElementById('sessionTime');
    
    if (dateInput) {
        // Definir data mínima como hoje
        const today = new Date().toISOString().split('T')[0];
        dateInput.min = today;
        
        // Evento de mudança de data
        dateInput.addEventListener('change', function() {
            const mentorId = document.getElementById('mentorId').value;
            if (this.value) {
                loadAvailableSlots(mentorId, this.value);
            } else {
                timeSelect.innerHTML = '<option value="">Selecione uma data primeiro</option>';
                timeSelect.disabled = true;
            }
        });
    }
});

// Função para mostrar mensagens
function showMessage(type, message, duration = 3000) {
    try {
        // Criar o elemento de alerta
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.innerHTML = `
            <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        // Adicionar ao início da área de mensagens
        const messageArea = document.getElementById('messageArea');
        messageArea.insertBefore(alertDiv, messageArea.firstChild);
        
        // Remover automaticamente após o tempo especificado
        if (duration > 0) {
            setTimeout(() => {
                if (alertDiv && alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, duration);
        }
    } catch (error) {
        console.error('Erro ao mostrar mensagem:', error);
    }
}

// Função para validar dados do formulário
function validateFormData(formData, requiredFields) {
    const missingFields = requiredFields.filter(field => !formData[field]);
    if (missingFields.length > 0) {
        throw new Error(`Campos obrigatórios faltando: ${missingFields.join(', ')}`);
    }
    return true;
}

// Função para atualizar select de horários
function updateTimeSelect(slots) {
    const timeSelect = document.getElementById('sessionTime');
    timeSelect.innerHTML = '<option value="">Selecione um horário</option>';
    
    if (Array.isArray(slots) && slots.length > 0) {
        slots.forEach(slot => {
            const option = document.createElement('option');
            option.value = slot;
            option.textContent = formatTime(slot);
            timeSelect.appendChild(option);
        });
        timeSelect.disabled = false;
    } else {
        timeSelect.innerHTML = '<option value="">Sem horários disponíveis</option>';
        timeSelect.disabled = true;
    }
}

// Função para tratar erros
function handleError(error, context) {
    console.error(`Erro em ${context}:`, error);
    showMessage('danger', `Erro ao ${context}. Por favor, tente novamente.`);
}

function updateSessionStatus(sessionId, status) {
    fetch(`/mentoring/sessions/${sessionId}/status`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            toastr.success('Status da sessão atualizado com sucesso!');
            setTimeout(() => location.reload(), 1500);
        } else {
            toastr.error(data.error || 'Erro ao atualizar status');
        }
    })
    .catch(error => {
        console.error('Erro:', error);
        toastr.error('Erro ao processar solicitação');
    });
}

// Inicializar tooltips
document.addEventListener('DOMContentLoaded', function() {
    const tooltips = document.querySelectorAll('[data-bs-toggle="tooltip"]');
    tooltips.forEach(tooltip => new bootstrap.Tooltip(tooltip));
});

function copyMeetLink(link) {
    navigator.clipboard.writeText(link).then(() => {
        showMessage('success', 'Link copiado para a área de transferência!');
    }).catch(() => {
        showMessage('error', 'Erro ao copiar link');
    });
}
</script> 